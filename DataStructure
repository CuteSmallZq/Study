#数据结构与算法分析
##第二章 算法分析
###2.1数学基础
-  1.  **定义：**如果存在正常数c和n~0~使得当N≥n~0~时T(N)≤cf(N),则记为T(N)=O(f(N))
 	2. **定义：**如果村子正常数c和n~0~使得等N≥n~0~时T(N)≥cg(N),则记为T(N)=Ω(g(N))
	3. **定义：**T(N)=Θ(h(N))当且仅当T(N)=O(h(N))且T(N)=Ω(h(N))
	4. **定义：**如果T(N)=O(p(N))且T(N)≠Θ(p(N)),则T(N)=o(p(N))
- 1. **法则 1：**如果T~1~(N)=O(f(N))且T~2~(N)=O(g(N))
(a)T~1~(N)+T~2~(N)=max(O(f(N)),O(g(N)))
(b)T~1~(N)*T~2~(N)=O(f(N)*g(N))
	2. **法则2：**如果T(N)是一个k次多项式，则T(N)=Θ(N^k^) 
	3. **法则3：**对任意常数k，log^k^N=O(N），即对数增长地十分缓慢
	
###2.4运行时间计算
- 一般法则
	1. **法则1——FOR循环**
	一次for循环的运行时间至多是该for循环内语句（包括测试）的运行时间乘以迭代的次数
	2. **法则2——嵌套的for循环**
	在一组嵌套for循环内部的一条语句总的运行时间为该语句的运行时间乘以该组所有的for循环的大小的乘积
	3. **法则3——顺序语句**
	将各个语句的运行时间求和即可
	4. **IF/ELSE语句**
	一个if/else语句的运行时间从不超过判断再加上S1和S2中运行时间长者的总的运行时间
```
if(conditon)
	S1
else
	S2
```
	
####运行时间中的对数
- 对分查找
```
int BinarySearch(const ElementType A[],ElementTypeX,intN)
{
	int low,mid,high;
	low=0;
	high=N-1;
	while(low<=high)
	{
		mid=(low+high)/2;
		if(A[mid]<X)
			low= mid+1;
		else if(A[mid]>X)
			high=mid-1;
		else
			return mid;
	}
	return NotFound;
}
``` 
**************************
##C语言和指针
####基本概念
- 计算机中的所有数据都是存放在存储器中的，一般把存储器的一个字节称为一个内存单元。为了正确地访问这些内存单元，必须为每个内存单元编上号。根据一个内存单元的编号即可准确地找到该内存单元。内存单元的编号也叫做地址，通常把这个地址叫做指针
- 一个指针是一个地址，是常量，而一个指针变量却可以被赋予不同的指针值，是变量。
####对指针变量的类型说明包括三个内容：
1. 指针类型说明，即定义变量为一个指针变量
2. 指针变量名
3. 变量值（指针）所指向的变量的数据类型
```
int *p1;
static int *p2;
float *p3;
```
####指针变量赋值的两种方式：
```
int a = 20;
int *p  = &a;
int *q;
q = &a;
```
####指针变量的运算
1. **取地址运算符&**
	取地址运算符&是单目运算符，其结合性为自右至左，其功能是取变量的地址。
2.  **取内容运算符 ***
	取内容运算符 * 是单目运算符，其结合性为自右至左，用来表示指针变量所指的变量。在 * 运算符之后跟的变量必须是指针变量。需要注意的是指针运算符  * 和指针变量说明中的指针说明符 *  不是一回事。在指针变量说明中，“ * ”是类型说明符，表示其后的变量是指针类型。而表达式中出现的“ * ”则是一个运算符用以表示指针变量所指的变量
```
#include<stdio.h>
int main()
{
	int a = 5;
	int *p = &a;
	printf("d%",*p);//打印出a的值
}
```
####指针变量的运算
- **赋值运算**
	1. 指针变量初始化赋值
	2. 把一个变量的地址赋予指向相同数据类型的指针变量
	3. 把一个指针变量的值赋予指向相同数据类型的指针变量
	```
	int a = 50;
	int *p;
	int *q;
	p = &a;
	q = p;	
	```
	4. 把数组的首地址赋予指向数组的指针变量
	```
	int a[5];
	int *p;
	p = a;//也可写作p = &a[0]
	``` 
	5. 把字符串的首地址赋予指向字符类型的指针变量
	```
	char c ="c language";
	char *p;
	p = c;
	```
	6. 把函数的入口地址赋予指向函数的指针变量
	```
	int(*pf)();
	pf = f;//f为函数名字
	```
- **加减算数运算**
对于**指向数组**的指针变量，可以加上或减去一个整数n。
指针变量加或减一个整数n的意义是把指针指向的当前位置（指向某数组元素）向前或向后移动n个位置（指针变量+1并不是地址+1，而是地址加数组元素所占的字节长度）
```
#include<stdio.h>
int main()
{
	int a[5] = {1,2,3,4,5};
	int *p =a;//此时打印a[0]的值
	printf("%d",*p);
	p = p+2;
	printf("%d",*p);//此时打印a[2]的值
}
```
** (1)两指针变量相减**
 两指针变量相减所得之差是两个指针所指数组元素之间相差的元素个数。实际上是两个地址之差再除以该数组元素的长度（字节数）。
** (2)两指针变量进行关系运算**
指向同一数组的两指针变量进行关系运算可表示它们所指数组元素之间的关系
```
#includ<stdio.h>
#include<stdbool.h>
#define NULL 0
int main()
{
	int a =10;
	int b = 20;
	int arr[5]={1,2,3,4,5};
	int *p1;
	int *p2;
	int *p3;
	int *p4;
	int *p5;
	p1 = &a;
	p2 = &b;
	p3 = arr;
	p4 = p3+2;
	p5 = NULL;//表明p是空指针，不指向任何变量
	int s = *p1 + *p2;//返回a+b的值
	bool bl1 = (p3 == p4);//判断p3p4是否指向同一数组元素
	bool bl2 = (p3 > p4);//判断p3是否处于p4的高地址位置
}
```
**注意：**将指针变量赋值为0和不赋值是不相同的。指针变量未赋值时，可以是任意值，是不能使用的，否则造成意外的错误。指针变量赋值为0后则可以使用，只是不指向具体的变量而已。
####数组指针变量的说明和使用
**说明：**
1. 一个数组是由连续的一块内存单元组成的，数组名就是这块连续内存单元的首地址。
```
int arr[5];
int *p =arr;
bool abool = (arr == p);
printf("%d",abool);//打印结果为1
```
2. 每个数组元素按其类型不同占有几个连续的内存单元
3. 一个数组元素的首地址也是它所占有的几个内存单元的首地址
4. 一个指针变量既可以指向一个数组，也可以指向一个数组元素。
####多维数组地址的表示方法
- a+i，a[i]，*(a+i)，&a[i][0]是等同的
-  &a[i]和a[i]也是等同的。因为在二维数组中不能把&a[i]理解为元素a[i]的地址，不存在元素a[i]。
####多维数组的指针变量
```
#include<stdio.h>

int main()
{
	static int a[3][4]={0,1,2,3,
					      4,5,6,7,
					      8,9,10,11};
	int (* p)[4];
	p = a;
	printf("%d",  * ( *(p+i)+j));//打印数组第i行j列的元素
	return 0；	
}
```
####字符串指针变量的说明和使用
字符串指针变量的定义说明与指向字符变量的指针变量说明是相同的，只能按照对指针变量的赋值不同来区别。**对指向字符变量的指针变量应赋予该字符变量的地址。**
```
#include<stdio.h>

int main()
{
	char c;
	char *p =&c;//表示p是一个指向字符变量c的指针变量
	char *s = "C Language";// 表示s是一个指向字符串的指针变量，把字符串的首地址赋予s
	printf("%s",s);//打印结果为C Language
	s = s+5;
	printf("%s",s)//打印结果为nguage,s+5后s指向字符“n”
	return 0；
}
```
####使用字符串指针变量与字符数组的区别
1. 字符串指针变量本身是一个变量，用于存放字符串的首地址。而字符串本身是存放在以该首地址为首的一块连续的内存空间中并以‘/0’作为串的结束。字符数组是由于若干个数组元素组成的，它可用来存放整个字符串。

2. 对字符数组作初始化赋值，必须采用外部类型或静态类型，如：``` static char st[]={“C Language”};```而对字符串指针变量则无此限制，如：``` char *ps="C Language";```

3. 对字符串指针方式 ```char *ps="C Language";```可以写为：``` char *ps;　ps="C Language";```而对数组方式：
```static char st[]={"C Language"};```
不能写为：
```char st[20];st={"C Language"};```
而只能对字符数组的各元素逐个赋值。
####函数指针变量
- C语言中一个函数总是占用一段连续的内存区，而函数名就是该函数所占内存区的首地址。
- 函数指针变量定义的一般形式为：```int(*pf)()//f一般为函数名;```
例如
```
#include<stdio.h>

int max(int a,int b)
{
	if(a>b)
		return a;
	else
		return b;
}
int main()
{
	int max(int a, int b);
	int(*pmax)()；
	int x,y,z;
	pmax = max;
	printf("input two numbers:\n");
	scanf("%d%d",&x,&y);
	z = (*pmax)(x,y);
	printf("%d",z);
	return 0;
}
```
**函数指针变量形式调用函数的步骤如下：**
1. 定义函数指针变量
2. 把被调函数的入口地址（函数名）赋予该指针变量
3. 用函数指针变量形式调用函数
**注意：**
1. 函数指针变量不能进行算术运算，其移动是没有意义的
2. 函数调用中（*pf）两边的括号不可少， *不应该理解为求值运算，在此处它只是一种表示符号
####指针型函数
- 在C语言中允许一个函数的返回值是一个指针（即地址），这种返回指针值的函数称为指针型函数
- 定义指针型函数的一般形式为
```
类型说明符 *函数名(形参表)
{
…… /*函数体*/
}
```
其中函数名之前加了“*”号表明这是一个指针型函数，即返回值是一个指针。类型说明符表示了返回的指针值所指向的数据类型。